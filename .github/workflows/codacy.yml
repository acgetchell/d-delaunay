---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.
# For more information on the Codacy security scan action usage and
# parameters, see https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

"on":
  push:
    branches: ["main"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main"]
  schedule:
    - cron: '42 0 * * 1'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      # for actions/checkout to fetch code
      contents: read
      # for github/codeql-action/upload-sarif to upload SARIF results
      security-events: write
      # only required for a private repository by
      # github/codeql-action/upload-sarif to get the Action run status
      actions: read
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Execute Codacy Analysis CLI and generate a SARIF output with
      # the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@562ee3e92b8e92df8b67e0a5ff8aa8e261919c08
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token
          # to get your project token from your Codacy repository.
          # You can also omit the token and run the tools that support
          # default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Process SARIF file to split by tool
      - name: Split SARIF by tool
        run: |
          if [ -f "results.sarif" ] && [ -s "results.sarif" ]; then
            echo "Processing SARIF file with multiple tools..."
            # Extract each run and create separate SARIF files
            jq -c '.runs[]' results.sarif | while IFS= read -r run; do
              tool_name=$(echo "$run" | \
                jq -r '.tool.driver.name' | \
                tr '/' '_' | tr ' ' '_')
              echo "Processing tool: $tool_name"

              # Create a proper SARIF file for this tool
              schema_url="https://raw.githubusercontent.com/oasis-tcs/"
              schema_url+="sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
              jq -n --argjson run "$run" \
                --arg schema "$schema_url" '{
                "$schema": $schema,
                "version": "2.1.0",
                "runs": [$run]
              }' > "sarif_${tool_name}.sarif"

              echo "Created sarif_${tool_name}.sarif"
            done
            # List generated files for debugging
            echo "Generated SARIF files:"
            ls -la sarif_*.sarif || echo "No split SARIF files found"
          else
            echo "No SARIF file found or file is empty"
            exit 0
          fi

      # Upload each SARIF file separately
      - name: Upload SARIF files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Don't iterate literal patterns when no files exist
          shopt -s nullglob
          upload_count=0
          for sarif_file in sarif_*.sarif; do
            if [ -f "$sarif_file" ]; then
              echo "Uploading $sarif_file"
              # Extract tool name for category
              tool_name=$(basename "$sarif_file" .sarif | sed 's/^sarif_//')
              # Upload using the action (we'll call it via environment variables)
              export SARIF_FILE="$sarif_file"
              export CATEGORY="codacy-$tool_name"
              # Use GitHub CLI to upload if available, otherwise use curl
              if command -v gh >/dev/null 2>&1; then
                gh api repos/${{ github.repository }}/code-scanning/sarifs \
                  --method POST \
                  --field sarif="$(base64 -w 0 < "$sarif_file")" \
                  --field commit_sha="${{ github.sha }}" \
                  --field ref="${{ github.ref }}" \
                  --field category="codacy-$tool_name" || echo "Failed to upload $sarif_file via gh"
              else
                # Fallback to curl
                curl -L \
                  -X POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${{ github.token }}" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "https://api.github.com/repos/${{ github.repository }}/code-scanning/sarifs" \
                  -d "$(jq -n \
                    --arg sarif "$(base64 -w 0 < "$sarif_file")" \
                    --arg commit "${{ github.sha }}" \
                    --arg ref "${{ github.ref }}" \
                    --arg category "codacy-$tool_name" \
                    '{sarif: $sarif, commit_sha: $commit, ref: $ref, category: $category}')" \
                  || echo "Failed to upload $sarif_file via curl"
              fi
              upload_count=$((upload_count + 1))
            fi
          done
          echo "Attempted to upload $upload_count SARIF files"
        continue-on-error: true

